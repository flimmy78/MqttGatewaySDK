#include "qcom_common.h"
#include "hm_app.h"
#include "qca_json.h"
#include "qca_ltlink.h"
#include "qca_sniffer.h"
#include "qca_smart_config.h"
/**
* @brief: device id
*/
#ifndef DEVICE_ID
#define DEVICE_ID	0
#endif

DEV_MYSELF_INFO hmIotsDevInfo;

void reset_system_info_flash(DEV_MYSELF_INFO *tempDevInfo)
{
			tempDevInfo->head = 0xaa;
			tempDevInfo->end = 0x55;
			tempDevInfo->environment_lux = ENVIRONMENT_BRIGHT;
			//tempDevInfo->aesKey = getAeskey();
			tempDevInfo->wifiInfo.work_mode = NONE_MODE;
}

void system_info_flash_init(DEV_MYSELF_INFO *tempDevInfo)
{
	 	qca_load_flash_params(FLASH_BASIC_ADDR + START_ADDR_FLASH_DEV_MYSELF_INFO_OFFSET, (unsigned char *)tempDevInfo, sizeof(DEV_MYSELF_INFO));
	 	if((tempDevInfo->head == 0xaa) && (tempDevInfo->end == 0x55))
	 	{
	 			printf("the flash of the system info data was valid\r\n");	
	 	}else{
	 			printf("the flash of the system info data was invalid,set to factory now\r\n");
	 			reset_system_info_flash(tempDevInfo);
	 			qca_save_flash_params(FLASH_BASIC_ADDR + START_ADDR_FLASH_DEV_MYSELF_INFO_OFFSET, (unsigned char *)tempDevInfo, sizeof(DEV_MYSELF_INFO));
	 	}
}

void ltlink_json(char *pdata, char *mac)
{
	json_t			*root;
	char			*pjson;

	root =  json_create_object();
	json_add_item_to_object(root, "t", json_create_string("configok"));
	json_add_item_to_object(root, "r", json_create_number(200));
	json_add_item_to_object(root, "mac", json_create_string(mac));
	pjson = json_encode(root);

	strcpy(pdata, pjson);
	json_delete(root);
	json_free(pjson);
}

/**
* @fn void ltlink_success_respond(void)
* @brief 
* @param 
* @return 
*/
void ltlink_success_respond(void)
{
	char *pData = NULL;
	char *pMac = NULL;
	char *pMacStr = NULL;

	pData = mem_alloc(64);
	pMac = mem_alloc(8);
	pMacStr = mem_alloc(16);

	memset(pData, 0, 64);
	memset(pMac, 0, 8);

	qcom_mac_get(DEVICE_ID, (unsigned char *)pMac);	

	sprintf(pMacStr, "%02x%02x%02x%02x%02x%02x", 
		pMac[0], pMac[1], pMac[2], pMac[3], pMac[4], pMac[5]);

	ltlink_json(pData, pMacStr);

	qca_ltlink_response(8001, pData, strlen(pData), 10, 50);

	mem_free(pData);
	mem_free(pMac);
	mem_free(pMacStr);
}


/**
* @fn qca_ltlink_success_cb(char *ssid, char *password, WLAN_AUTH_MODE auth, WLAN_CRYPT_TYPE crypt)
* @brief ltlink success callback function
* @param ssid		AP's ssid
* @param password	AP's password
* @param respond    link response
* @param auth		refer to WLAN_AUTH_MODE
* @param crypt		refer to WLAN_CRYPT_TYPE
*/
void qca_ltlink_success_cb(char *ssid, char *password, WLAN_AUTH_MODE auth, WLAN_CRYPT_TYPE crypt)
{
	t_save_param_type	*pParam = &t_save_param;
	char				*p;

	printf("------------Ltink success----------------\n");
	printf("ssid: %s\n", ssid);
	printf("password: %s\n", password);


	p = strchr(password, '+');

	if (p != NULL)
	{
		*p = 0x0;
	}

	strcpy(pParam->sta_ssid, ssid);
	strcpy(pParam->sta_password, password);

	pParam->work_mode = STATION_MODE;
	pParam->sta_mode = WITH_SCAN;

	qca_save_flash(pParam);

	qcom_thread_msleep(200);
	qcom_sys_reset();			// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½APï¿½É¹ï¿½ï¿½ó£¬»Ø¸ï¿½response
}

/**
* @fn void user_promiscuous_cb(unsigned char *buf, int length)
* @brief register promiscuous callback
* @param buf Data received in promiscuous mode
* @param length the length of data
* @return none
*/
void user_promiscuous_cb(unsigned char *buf, int length)
{
	qca_ltlink_promiscuous_cb(buf, length);
}


void hm_smart_link_start(void)
{
	int channel;
	int ret;
	printf("start smart link\r\n");
	
	//== register callback function
	qcom_set_promiscuous_rx_cb(user_promiscuous_cb);

	//== start ltlink
	ret = qca_ltlink_start(qca_ltlink_success_cb);
	if(ret < 0)
	{
		return;
	}

	while(1)
	{
		qcom_thread_msleep(100);

		//== Check if the channel has been locked 
		if (qca_ltlink_is_lock_channel() == 1)
		{
			continue;
		}

		channel = qca_ltlink_get_next_valid_channel();
		if (channel != 0)
		{
			qcom_set_channel(DEVICE_ID, channel);
		}
	}
}


/**
* @fn void sniffer_success_cb(char *ssid, char *password, unsigned char response, tSuccessMode_Type tmode)
* @brief sniffer success callback
* @param *ssid recive ssid
* @param *password recive password
* @param response recive response
* @param mode smartlink mode
* @return none
*/
void sniffer_success_cb(char *ssid, char *password, unsigned char response, tSuccessMode_Type tmode)
{
	t_save_param_type	*pParam = &t_save_param;

	switch (tmode)
	{
	case AIRKISS:

		printf("airkiss recv success.\n");
		break;
	case SNIFFER:

		printf("sniffer recv success.\n");
		break;
	default:break;
	}

	printf("ssid:%s\n", ssid);
	printf("password:%s\n", password);

	strcpy(pParam->sta_ssid, ssid);
	strcpy(pParam->sta_password, password);
	pParam->sta_respond = response;
	pParam->work_mode = STATION_MODE;
	pParam->sta_mode = WITH_SCAN;

	qca_save_flash(pParam);

	qcom_thread_msleep(200);
	qcom_sys_reset();	

}

void hm_start_smartlink_mode(int mode)
{
	switch (mode)
	{
		case AIRKISS_MODE://±£Áô
			qca_sniffer_start(SCAN_CHANNEL_MODE, sniffer_success_cb);
			qca_set_sniffer_en(EN_AIRKISS);
			break;
		case SNIFFER_MODE:  //±£Áô
			qca_sniffer_start(SCAN_CHANNEL_MODE, sniffer_success_cb);
			qca_set_sniffer_en(EN_SNIFFER);
			break;
		case CONFIG_MODE:   //±£Áô
			qca_sniffer_start(SCAN_CHANNEL_MODE, sniffer_success_cb);
			qca_set_sniffer_en(EN_ALL);
			break;
		case LTLINK_MODE:
			hm_smart_link_start();
			break;
		default:
	
			break;
	}
}

void hm_network_init(void)
{
		DEV_MYSELF_INFO *tempDevInfo = &hmIotsDevInfo;
		system_info_flash_init(tempDevInfo);
		switch(tempDevInfo->wifiInfo.work_mode)
		{
			case SOFTAP_MODE:
				printf("NT:0017,%s,%s,%d\r\n", tempDevInfo->wifiInfo.sap_ssid, tempDevInfo->wifiInfo.sap_password, tempDevInfo->wifiInfo.sap_channel);
				// start softAP mode
				qca_start_softap_mode(tempDevInfo->wifiInfo.sap_ssid, tempDevInfo->wifiInfo.sap_password, tempDevInfo->wifiInfo.sap_channel);
		
				printf("NT:0009,%s,%s,%s\r\n", SOFTAP_IP, SOFTAP_MASK, SOFTAP_GATEWAY);
		
				// create UDP/TCP Server/TCP Client task
				qca_socket_init();
		
				break;
			case STATION_MODE:
				printf("NT:0002\r\n");
				while (1)
				{
					tGlobal_param.connect_state = CONNECTTING_STATE;
					if (WITHOUT_SCAN == pParam->sta_mode)
					{
						qca_ap_set_auth_encrypt(pParam->sta_auth, pParam->sta_cryte);
						ret = qca_start_station_mode(WITHOUT_SCAN, pParam->sta_ssid, pParam->sta_password, 20000);
					}
					else
					{
						ret = qca_start_station_mode(WITH_SCAN, pParam->sta_ssid, pParam->sta_password, 20000);
					}
					
					if (ret == CONNECT_OK)
					{
						ltlink_success_respond();
		//				qca_airkiss(AIRKISS_V2, "gh_a1add65ebcdf", "4kCdtL0og", pParam->sta_respond);
						qcom_ip_address_get(DEVICE_ID, &ip, &mask, &gateway);
		
						AT_PRINTF(UART_Channel, "NT:0009" "," IPV4_FMT "," IPV4_FMT "," IPV4_FMT "\r\n", IPV4_ADDR(ip), IPV4_ADDR(mask), IPV4_ADDR(gateway));
		
						tGlobal_param.connect_state = CONNECTED_STATE;
						qca_socket_init();
		
						if(pParam->savepower == 1){
							qcom_set_power_mode(DEVICE_ID, REC_POWER);
		            		cmnos_power_syssleep_control(1);
						}
						break;
					}
					else if (ret == SSID_ERROR)
					{
						break;
					}
					else if (ret == PASSWORD_ERROR)
					{
						qcom_sys_reset();
					}
					else
					{
						break;
					}
				}
		
				break;
			case SNIFFER_MODE:
				AT_PRINTF(UART_Channel, "NT:0014\r\n");
				tGlobal_param.connect_state = CONFIG_STATE;
				qca_start_smartlink_mode(SNIFFER_MODE);
				break;
			case AIRKISS_MODE:
				AT_PRINTF(UART_Channel, "NT:0004\r\n");
				tGlobal_param.connect_state = CONFIG_STATE;
				qca_start_smartlink_mode(AIRKISS_MODE);
				break;
			case LTLINK_MODE:
				AT_PRINTF(UART_Channel, "NT:0018\r\n");
				tGlobal_param.connect_state = CONFIG_STATE;
				qca_start_smartlink_mode(LTLINK_MODE);
				break;
			default:
				break;
		}
}