#include "qcom_common.h"
#include "qca_json.h"
#include "hm_app.h"
#include "hm_zigbeeInfohand.h"
#include "string.h"
#include "hm_otaDefine.h"
#include "hm_net_data_manage.h"

extern DEV_OTA_STATION otaStationInfo;
uint8_t zcXmodemStation;
uint8_t devOtaUpdateingFlag;
extern GWSTATFORTIME gwStateForRealTime;
extern DEV_OTA_STATION otaStationInfo;


// Table of CRC constants - implements x^16+x^12+x^5+1
const uint16_t crc16_tab[] = {
    0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7, 
    0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef, 
    0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6, 
    0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de, 
    0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485, 
    0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d, 
    0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4, 
    0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc, 
    0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823, 
    0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b, 
    0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12, 
    0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a, 
    0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41, 
    0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49, 
    0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70, 
    0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78, 
    0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f, 
    0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067, 
    0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e, 
    0x02b1, 0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256, 
    0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d, 
    0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405, 
    0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c, 
    0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634, 
    0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab, 
    0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3, 
    0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a, 
    0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92, 
    0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9, 
    0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1, 
    0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 
    0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0, 
};


void zigbeeModeReset(void)
{
	qca_gpio_set_pin_status(ZIGBEE_RESET,0);
	us_delay(100000);
	qca_gpio_set_pin_status(ZIGBEE_RESET,1);
}

uint16_t do_crc16_check(unsigned char *data,uint16_t len )
{
	uint16_t i;
	uint16_t chk = 0;
	for(i = 0; i < len; i ++)
	{
		chk = crc16_tab[((chk>>8) ^ data[i]) & 0xFF] ^ (chk << 8);
	}
	return chk;
}
// 发送数据帧
void uartSendXmodemRecord(unsigned char * buff,uint8_t pack_counter)
{
	int i;
       uint16_t crc_result;
       uint8_t tempData[140];
	tempData[0] = XMODEM_HEAD;
	tempData[1] = pack_counter;
	tempData[2] = 255-pack_counter;

	memcpy(&tempData[3],buff,XMODEM_DATA_SIZE);
	crc_result = do_crc16_check(buff,XMODEM_DATA_SIZE);
	tempData[3 + XMODEM_DATA_SIZE] = (crc_result >> 8) & 0xff;
	tempData[4 + XMODEM_DATA_SIZE] = crc_result & 0xff;
	qca_uart_send(tempData,XMODEM_DATA_SIZE + 5);
	printf("send data:\r\n");
	for(i = 0; i < XMODEM_DATA_SIZE + 5; i ++)
	{
		printf("%02x",tempData[i]);
	}
}

void uartSendXmodemCancel(void)
{
	uint8_t data = XMODEM_CAN;
	qca_uart_send(&data,1);
}

void uartSendXmodemOTAEnd(void)
{
	uint8_t data = XMODEM_EOT;
	qca_uart_send(&data,1);
}

void uartSendXmodemStartOTA(void)
{
	uint8_t data = 'u';
	qca_uart_send(&data,1);
}

void uartSendXmodemExApp(void)
{
	uint8_t data = 'r';
	qca_uart_send(&data,1);
}
void userXmodemTransport(void)
{
    char complete,retry_num;
    uint8_t  frame_data[XMODEM_DATA_SIZE];
    uint8_t pack_counter,i;
    uint16_t real_pack_counter;//真实的packet counter，因为XMODEM的packet counter到255就溢出
    uint32_t imageAddr = START_ADDR_FLASH_SUB_FIRMWARE_ADDR;
    int32_t remainImageSize = 0;
    uint8_t waitNum = 0;
    uint8_t waitEnd = 0;
    uint8_t endFlag = 0;
    uint8_t parm[4];
    pack_counter = 0;
    real_pack_counter = 0;
    complete = 0;

    printf("enter user send xmodem data for ota:%d\r\n",otaStationInfo.devImageSize);
    remainImageSize = otaStationInfo.devImageSize;

    while (complete == 0)
    {
            switch (zcXmodemStation)
            {
                    case XMODEM_ACK:   // 正确应答
                    case XUSER_START:
                    		printf("xmode start\r\n");
                            retry_num = 0;
                            pack_counter ++;
                            real_pack_counter ++;
                            memset(frame_data,0,XMODEM_DATA_SIZE);		// 缓冲区清零
				if(remainImageSize > 0)
				{			
	                            if(remainImageSize < XMODEM_DATA_SIZE)
	                            {
						qca_load_flash_params(imageAddr,frame_data,remainImageSize);
						for(i = 0; i < (XMODEM_DATA_SIZE - remainImageSize); i ++)
						{
							frame_data[remainImageSize + i] = CTRLZ;
						}
						remainImageSize = 0;
					}else{
		                            qca_load_flash_params(imageAddr,frame_data,XMODEM_DATA_SIZE);
		                            remainImageSize = otaStationInfo.devImageSize - real_pack_counter * XMODEM_DATA_SIZE;
					}
					imageAddr += XMODEM_DATA_SIZE;
					uartSendXmodemRecord(frame_data,pack_counter);			// 发送数据帧
	                            zcXmodemStation = XUSER_WAIT_COMMUNITE_ACK;		// 等应答
				}else{
					uartSendXmodemOTAEnd();
					zcXmodemStation = XUSER_WAIT_END_ACK;
					endFlag = 1;
				}
				waitNum = 0;//清除等待时间计时器
                            break;
                    case XMODEM_NAK:	// 请求重发
                    		printf("xmode resend\r\n");
                            if( retry_num++ > 10) //Retry too many times
                            {
                                    complete = 1;
 					 uartSendXmodemCancel();
					 uartSendXmodemCancel();
					 uartSendXmodemCancel();
					 if(real_pack_counter > 1)//如果是在升级中途取消，则重启zigbee模块
					 {
						zigbeeModeReset();
					 }else{
						devOtaUpdateingFlag = 0;//只有当完全下载完才或者没有下载过，就将改为清零
					 }
                            }
                            else
                            {
                            		if(endFlag == 0)
                            		{
                                   		 uartSendXmodemRecord(frame_data,pack_counter);	// 重发
                                   		 zcXmodemStation = XUSER_WAIT_COMMUNITE_ACK;
                                    }else{
						uartSendXmodemOTAEnd();
						zcXmodemStation = XUSER_WAIT_END_ACK;
                                    }
                            }
                            break;
			case XMODEM_CAN:
				printf("xmode not allow send again\r\n");
				if(real_pack_counter > 1)//如果是在升级中途取消，则重启zigbee模块
				{
					zigbeeModeReset();
				}else{
					devOtaUpdateingFlag = 0;//只有当完全下载完才或者没有下载过，就将改为清零
				}
				complete = 1;
				break;
			case XUSER_WAIT_COMMUNITE_ACK:
			case XUSER_WAIT_END_ACK:
				printf("xmode wait acck\r\n");
				waitNum ++;
				if(waitNum >= 50)
				{	
					if(real_pack_counter > 1)//如果是在升级中途取消，则重启zigbee模块
					 {
						zigbeeModeReset();
					 }else{
						devOtaUpdateingFlag = 0;//只有当完全下载完才或者没有下载过，就将改为清零
					 }
					complete = 1;
					printf("wait time out");
				}
				qcom_thread_msleep(50);
				break;
			case XUSER_END:
				printf("xmode wait zc rsp complet\r\n");
				waitEnd ++;
				if(waitEnd >= 30)
				{
					zigbeeModeReset();
				}
				complete = 1;
				qcom_thread_msleep(50);
				break;
			case XUSER_RESTART_APP:
				printf("xmode end\r\n");
				parm[0] = OTA_MODE_ZC;
				parm[1] = HM_IOTS_SMALL_GW_TYPE & 0xff;
				parm[2] = (HM_IOTS_SMALL_GW_TYPE >> 8) & 0xff;
				parm[3] = 1;
				hmSetIotsEvent(HFZ_EVENT_SOURCE_OTA, 0, (void *)&parm,4);
				qcom_thread_msleep(800);
				if(gwStateForRealTime.zigbeeZcBasicInfo.zcSoftVersion == 0)
				{
					printf("sys reset for dev ota ok\r\n");
					uartSendXmodemExApp();
					qcom_thread_msleep(500);
					userCheckSaveFlashAndReset(1);//证明zigbee初始化的时候未成功，所以在此需要重启设备
				}else{
					gwStateForRealTime.zigbeeZcBasicInfo.zcSoftVersion = otaStationInfo.devImageVersion;//版本号更新，在此不重启，所以ram中的版本号需要手动更新
					uartSendXmodemExApp();
					devOtaUpdateingFlag = 0;//只有当完全下载完才或者没有下载过，就将改为清零
					complete = 1;
				}
				break;
                     default:
                     		printf("xmode default\r\n");
                            complete = 1;
                            uartSendXmodemCancel();
				uartSendXmodemCancel();
				uartSendXmodemCancel();
				if(real_pack_counter > 1)//如果是在升级中途取消，则重启zigbee模块
				 {
					zigbeeModeReset();
				 }else{
					devOtaUpdateingFlag = 0;//只有当完全下载完才或者没有下载过，就将改为清零
				 }
                            break;
            }
    }
    return;
}













