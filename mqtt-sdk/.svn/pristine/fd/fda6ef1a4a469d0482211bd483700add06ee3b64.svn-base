/*
    qca_ssl_client test case

    Add the code below to you project to test

>    extern void test_ssl_client(void);
>    test_ssl_client();
 */
#include "sample_main.h"

#include "qca_ssl_client.h"

#define SERVER_IP               "192.168.7.74"
#define SERVER_PORT             1226

#define         SSL_STACK_SIZE      1024*4
TX_THREAD       ssl_thread;
A_UINT8         ssl_thread_buf[SSL_STACK_SIZE];

/* This cert have to be replace by user */
const unsigned char calist_cert1[] = {
 0x00, 0x00, 0x00, 0x01, 0x31, 0x39, 0x32, 0x2E, 
   0x31, 0x36, 0x38, 0x2E, 0x00, 0x00, 0x00, 0x10, 
   0x30, 0x82, 0x03, 0x0D, 0x30, 0x82, 0x01, 0xF5, 
   0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x09, 0x00, 
   0x96, 0xA9, 0xA9, 0x1D, 0xFC, 0x37, 0xE2, 0x4A, 
   0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 
   0xF7, 0x0D, 0x01, 0x01, 0x05, 0x05, 0x00, 0x30, 
   0x81, 0x90, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 
   0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4E, 0x31, 
   0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x08, 
   0x0C, 0x02, 0x47, 0x44, 0x31, 0x0B, 0x30, 0x09, 
   0x06, 0x03, 0x55, 0x04, 0x07, 0x0C, 0x02, 0x53, 
   0x5A, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 
   0x04, 0x0A, 0x0C, 0x09, 0x4C, 0x4F, 0x4E, 0x47, 
   0x54, 0x48, 0x49, 0x4E, 0x4B, 0x31, 0x14, 0x30, 
   0x12, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x0B, 
   0x44, 0x45, 0x56, 0x45, 0x4C, 0x4F, 0x50, 0x4D, 
   0x45, 0x4E, 0x54, 0x31, 0x17, 0x30, 0x15, 0x06, 
   0x03, 0x55, 0x04, 0x03, 0x0C, 0x0E, 0x31, 0x32, 
   0x30, 0x2E, 0x32, 0x34, 0x2E, 0x32, 0x31, 0x36, 
   0x2E, 0x31, 0x35, 0x33, 0x31, 0x24, 0x30, 0x22, 
   0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 
   0x01, 0x09, 0x01, 0x16, 0x15, 0x64, 0x65, 0x6E, 
   0x6E, 0x69, 0x73, 0x2E, 0x67, 0x65, 0x40, 0x6C, 
   0x6F, 0x6E, 0x67, 0x73, 0x79, 0x73, 0x2E, 0x63, 
   0x6F, 0x6D, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x36, 
   0x30, 0x34, 0x32, 0x31, 0x30, 0x32, 0x34, 0x38, 
   0x34, 0x38, 0x5A, 0x17, 0x0D, 0x31, 0x36, 0x30, 
   0x35, 0x32, 0x31, 0x30, 0x32, 0x34, 0x38, 0x34, 
   0x38, 0x5A, 0x30, 0x52, 0x31, 0x0B, 0x30, 0x09, 
   0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 
   0x4E, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 
   0x04, 0x08, 0x13, 0x02, 0x47, 0x44, 0x31, 0x0B, 
   0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x07, 0x13, 
   0x02, 0x53, 0x5A, 0x31, 0x12, 0x30, 0x10, 0x06, 
   0x03, 0x55, 0x04, 0x0B, 0x13, 0x09, 0x4C, 0x4F, 
   0x4E, 0x47, 0x54, 0x48, 0x49, 0x4E, 0x4B, 0x31, 
   0x15, 0x30, 0x13, 0x06, 0x03, 0x55, 0x04, 0x03, 
   0x13, 0x0C, 0x31, 0x39, 0x32, 0x2E, 0x31, 0x36, 
   0x38, 0x2E, 0x37, 0x2E, 0x37, 0x34, 0x30, 0x81, 
   0x9F, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 
   0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 
   0x03, 0x81, 0x8D, 0x00, 0x30, 0x81, 0x89, 0x02, 
   0x81, 0x81, 0x00, 0xA1, 0x39, 0xB3, 0x9D, 0xFF, 
   0x5A, 0x4E, 0x83, 0x5D, 0xA9, 0x0E, 0x74, 0x4E, 
   0x20, 0xAF, 0xBC, 0xA5, 0x82, 0x73, 0x88, 0x89, 
   0xEE, 0x52, 0xBD, 0xFD, 0x0B, 0xF2, 0x85, 0xE0, 
   0x70, 0x00, 0x9D, 0x86, 0x87, 0x9C, 0x7E, 0x00, 
   0xF7, 0x23, 0x6B, 0x5C, 0xCC, 0xE2, 0xE9, 0x6E, 
   0x49, 0x2E, 0x9C, 0xCF, 0x9D, 0x0E, 0x67, 0x40, 
   0x99, 0x28, 0x09, 0x37, 0x3F, 0x35, 0xDA, 0x4C, 
   0x09, 0xDB, 0x7A, 0x4F, 0xA4, 0x5E, 0x33, 0x78, 
   0x0A, 0x18, 0x3A, 0xE1, 0xE1, 0xD7, 0xE6, 0xD7, 
   0x09, 0xA5, 0x7F, 0x21, 0x2D, 0x6E, 0xD3, 0x36, 
   0xB1, 0x56, 0xEB, 0xDD, 0x0D, 0x31, 0x36, 0x3B, 
   0xD9, 0x18, 0x74, 0x87, 0x1E, 0x3D, 0x7A, 0xD8, 
   0xEC, 0xEF, 0x25, 0xBC, 0x35, 0x80, 0xD8, 0x8F, 
   0xA6, 0xD4, 0x99, 0x04, 0x27, 0xAF, 0x72, 0xA1, 
   0x85, 0xDC, 0xB0, 0xC7, 0xF6, 0xEF, 0x77, 0x75, 
   0xD0, 0xB3, 0xB7, 0x02, 0x03, 0x01, 0x00, 0x01, 
   0xA3, 0x2B, 0x30, 0x29, 0x30, 0x09, 0x06, 0x03, 
   0x55, 0x1D, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 
   0x0B, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x04, 0x04, 
   0x03, 0x02, 0x05, 0xE0, 0x30, 0x0F, 0x06, 0x03, 
   0x55, 0x1D, 0x11, 0x04, 0x08, 0x30, 0x06, 0x87, 
   0x04, 0xC0, 0xA8, 0x07, 0x4A, 0x30, 0x0D, 0x06, 
   0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 
   0x01, 0x05, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 
   0x00, 0x3D, 0x2E, 0x48, 0x0C, 0xFA, 0xC8, 0xB2, 
   0xCB, 0x92, 0xA3, 0x31, 0xD1, 0xD5, 0x58, 0x9A, 
   0xAD, 0x79, 0xC3, 0x18, 0x9E, 0x54, 0xEB, 0xD7, 
   0xC6, 0xFB, 0xEB, 0xC4, 0xD1, 0xEF, 0xFF, 0xEA, 
   0x34, 0x95, 0x1E, 0x31, 0xAE, 0xDF, 0x68, 0x07, 
   0xD9, 0x08, 0xB8, 0xA5, 0x8A, 0x21, 0x03, 0x1B, 
   0xBB, 0xD2, 0x5F, 0xF4, 0xB2, 0x85, 0x3A, 0x28, 
   0x2C, 0xB9, 0xC3, 0x05, 0xD2, 0xF3, 0x88, 0xD2, 
   0x29, 0xF8, 0x4E, 0x5E, 0xD0, 0xA4, 0xBE, 0x5E, 
   0x49, 0xBD, 0xC4, 0xCC, 0xE5, 0x15, 0x59, 0x4F, 
   0x9F, 0xFD, 0xCA, 0x73, 0x95, 0xFC, 0x11, 0x48, 
   0xB1, 0x56, 0x68, 0xF1, 0x43, 0xCB, 0x98, 0xEA, 
   0xD8, 0x95, 0x02, 0xCA, 0xA2, 0xD9, 0xC2, 0x07, 
   0x32, 0xFC, 0xFE, 0x77, 0xFD, 0x27, 0xE4, 0x53, 
   0xD2, 0xBA, 0xFA, 0x13, 0x03, 0x34, 0x9B, 0x84, 
   0xCE, 0x1C, 0x89, 0x06, 0x54, 0x89, 0x65, 0x2A, 
   0x77, 0x46, 0xF3, 0xFA, 0x61, 0x02, 0xCD, 0xEF, 
   0x1A, 0x90, 0x32, 0x9B, 0xC0, 0xDE, 0x19, 0xC2, 
   0xCA, 0x48, 0x61, 0x2E, 0xCB, 0x68, 0x93, 0x1F, 
   0x4D, 0x19, 0x2F, 0xEF, 0x71, 0x89, 0x08, 0x64, 
   0x96, 0x9C, 0x85, 0xD3, 0x9D, 0x3D, 0xCD, 0xBB, 
   0xCE, 0xA2, 0xE7, 0x45, 0x3E, 0x0E, 0xF5, 0xFA, 
   0x15, 0x20, 0x29, 0x06, 0xFC, 0x4D, 0x18, 0x77, 
   0xA8, 0x8A, 0x90, 0x51, 0xE8, 0x39, 0x66, 0xCA, 
   0x22, 0x17, 0x78, 0xD0, 0xE2, 0xC8, 0xC9, 0x99, 
   0x86, 0xDC, 0x7A, 0x4D, 0x0C, 0x75, 0x55, 0x4C, 
   0x6C, 0x78, 0x53, 0x3F, 0xCB, 0x70, 0xC8, 0x66, 
   0xE8, 0xBC, 0x52, 0x2E, 0xCC, 0x40, 0x68, 0xD9, 
   0xC8, 0x87, 0x80, 0x90, 0x32, 0x22, 0xFC, 0x6B, 
   0x8A, 0x45, 0x95, 0x7F, 0x82, 0xBF, 0xBF, 0x58, 
   0x75, 0xFA, 0x7F, 0x27, 0xFD, 0x7A, 0x9D, 0xB1, 
   0xE1, 0xA6, 0x48, 0x58, 0x15, 0x08, 0xE4, 0x33, 
   0xE2
};
/* This cert have to be replace by user */
const unsigned char calist_cert2[] = {
 0x00, 0x00, 0x00, 0x01, 0x31, 0x39, 0x32, 0x2E, 
   0x31, 0x36, 0x38, 0x2E, 0x00, 0x00, 0x00, 0x10, 
   0x30, 0x82, 0x03, 0x0D, 0x30, 0x82, 0x01, 0xF5, 
   0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x09, 0x00, 
   0x96, 0xA9, 0xA9, 0x1D, 0xFC, 0x37, 0xE2, 0x4B, 
   0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 
   0xF7, 0x0D, 0x01, 0x01, 0x05, 0x05, 0x00, 0x30, 
   0x81, 0x90, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 
   0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4E, 0x31, 
   0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x08, 
   0x0C, 0x02, 0x47, 0x44, 0x31, 0x0B, 0x30, 0x09, 
   0x06, 0x03, 0x55, 0x04, 0x07, 0x0C, 0x02, 0x53, 
   0x5A, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 
   0x04, 0x0A, 0x0C, 0x09, 0x4C, 0x4F, 0x4E, 0x47, 
   0x54, 0x48, 0x49, 0x4E, 0x4B, 0x31, 0x14, 0x30, 
   0x12, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x0B, 
   0x44, 0x45, 0x56, 0x45, 0x4C, 0x4F, 0x50, 0x4D, 
   0x45, 0x4E, 0x54, 0x31, 0x17, 0x30, 0x15, 0x06, 
   0x03, 0x55, 0x04, 0x03, 0x0C, 0x0E, 0x31, 0x32, 
   0x30, 0x2E, 0x32, 0x34, 0x2E, 0x32, 0x31, 0x36, 
   0x2E, 0x31, 0x35, 0x33, 0x31, 0x24, 0x30, 0x22, 
   0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 
   0x01, 0x09, 0x01, 0x16, 0x15, 0x64, 0x65, 0x6E, 
   0x6E, 0x69, 0x73, 0x2E, 0x67, 0x65, 0x40, 0x6C, 
   0x6F, 0x6E, 0x67, 0x73, 0x79, 0x73, 0x2E, 0x63, 
   0x6F, 0x6D, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x36, 
   0x30, 0x34, 0x32, 0x31, 0x30, 0x32, 0x35, 0x31, 
   0x34, 0x32, 0x5A, 0x17, 0x0D, 0x31, 0x36, 0x30, 
   0x35, 0x32, 0x31, 0x30, 0x32, 0x35, 0x31, 0x34, 
   0x32, 0x5A, 0x30, 0x52, 0x31, 0x0B, 0x30, 0x09, 
   0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 
   0x4E, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 
   0x04, 0x08, 0x13, 0x02, 0x47, 0x44, 0x31, 0x0B, 
   0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x07, 0x13, 
   0x02, 0x53, 0x5A, 0x31, 0x12, 0x30, 0x10, 0x06, 
   0x03, 0x55, 0x04, 0x0B, 0x13, 0x09, 0x4C, 0x4F, 
   0x4E, 0x47, 0x54, 0x48, 0x49, 0x4E, 0x4B, 0x31, 
   0x15, 0x30, 0x13, 0x06, 0x03, 0x55, 0x04, 0x03, 
   0x13, 0x0C, 0x31, 0x39, 0x32, 0x2E, 0x31, 0x36, 
   0x38, 0x2E, 0x37, 0x2E, 0x37, 0x34, 0x30, 0x81, 
   0x9F, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 
   0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 
   0x03, 0x81, 0x8D, 0x00, 0x30, 0x81, 0x89, 0x02, 
   0x81, 0x81, 0x00, 0xC7, 0x05, 0xBB, 0x0C, 0xB6, 
   0xDB, 0x9F, 0xC2, 0xFF, 0x07, 0x57, 0x43, 0xA7, 
   0x8E, 0x26, 0x68, 0x57, 0x4F, 0x64, 0x69, 0x36, 
   0xC1, 0xF5, 0x23, 0x37, 0xD5, 0x9A, 0x29, 0xF9, 
   0x99, 0x31, 0x87, 0x69, 0x13, 0x02, 0xC3, 0x5B, 
   0x64, 0x4F, 0xC7, 0x96, 0x9B, 0x23, 0x6E, 0xB7, 
   0xC8, 0x62, 0xAA, 0x0F, 0x05, 0x4A, 0x7D, 0xC5, 
   0x73, 0x4B, 0xB0, 0x40, 0x7F, 0x80, 0x24, 0xDF, 
   0xA6, 0x6D, 0xE1, 0xF9, 0x80, 0x50, 0x6B, 0x01, 
   0x1E, 0x5C, 0x42, 0x15, 0x54, 0xD0, 0xF1, 0xBA, 
   0x58, 0x09, 0xB3, 0xDF, 0xF0, 0x93, 0x43, 0x37, 
   0x14, 0x87, 0x6D, 0x73, 0xDB, 0x06, 0xDB, 0xDA, 
   0x16, 0x5F, 0x7A, 0x32, 0x61, 0xE6, 0x7B, 0x3A, 
   0x2E, 0x64, 0x57, 0x5F, 0xA0, 0x35, 0x9A, 0x34, 
   0xB8, 0x4F, 0x44, 0xE2, 0xA8, 0x8D, 0x3C, 0x86, 
   0x46, 0xD3, 0xA3, 0x1F, 0x74, 0x85, 0x06, 0xB7, 
   0x8B, 0x59, 0xFD, 0x02, 0x03, 0x01, 0x00, 0x01, 
   0xA3, 0x2B, 0x30, 0x29, 0x30, 0x09, 0x06, 0x03, 
   0x55, 0x1D, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 
   0x0B, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x04, 0x04, 
   0x03, 0x02, 0x05, 0xE0, 0x30, 0x0F, 0x06, 0x03, 
   0x55, 0x1D, 0x11, 0x04, 0x08, 0x30, 0x06, 0x87, 
   0x04, 0xC0, 0xA8, 0x07, 0x4A, 0x30, 0x0D, 0x06, 
   0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 
   0x01, 0x05, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 
   0x00, 0x50, 0x38, 0x22, 0xEE, 0x17, 0xDC, 0xA5, 
   0xD4, 0xF6, 0x71, 0x44, 0xB0, 0xD0, 0x20, 0x65, 
   0xC2, 0x49, 0xA0, 0xBD, 0x9F, 0x4F, 0xF0, 0xA9, 
   0xFC, 0x7C, 0xEF, 0x3E, 0x67, 0x6B, 0x5F, 0x03, 
   0xD7, 0x7E, 0x82, 0x2A, 0x5A, 0x63, 0x43, 0x2F, 
   0xD8, 0xFD, 0x0E, 0x58, 0xA6, 0xD1, 0xDE, 0x83, 
   0xD7, 0x23, 0xAE, 0x2A, 0xD4, 0x3F, 0xA4, 0x6E, 
   0x81, 0xFE, 0xFE, 0xDF, 0xCB, 0x73, 0xEE, 0x2E, 
   0x6D, 0x92, 0x44, 0xAC, 0x19, 0xAD, 0xAF, 0x72, 
   0x4E, 0x4E, 0x59, 0x5F, 0x11, 0x0B, 0x35, 0x44, 
   0x29, 0x77, 0x58, 0x53, 0x0F, 0x95, 0xA5, 0x3E, 
   0x1B, 0x3C, 0x7A, 0xAC, 0x35, 0x50, 0xE4, 0x4E, 
   0x4B, 0x53, 0x05, 0xAA, 0xEA, 0x6B, 0x8A, 0xAE, 
   0xA4, 0xD7, 0x36, 0x1E, 0x9D, 0x0F, 0x24, 0xFD, 
   0x1E, 0xC8, 0x6C, 0x72, 0x24, 0xE1, 0xCF, 0x9C, 
   0xF0, 0x46, 0x6B, 0x27, 0x97, 0xF3, 0x93, 0x0D, 
   0x48, 0x23, 0xA2, 0x6A, 0x3E, 0x59, 0xB2, 0x77, 
   0x89, 0xF6, 0x43, 0xC6, 0x4E, 0x2C, 0x6C, 0xB5, 
   0xC9, 0x15, 0x36, 0xC8, 0x33, 0x8E, 0x02, 0x06, 
   0xC8, 0x68, 0xF8, 0xF8, 0x99, 0x42, 0xCC, 0x18, 
   0x95, 0xFE, 0xBD, 0x56, 0x2D, 0x64, 0xAD, 0x62, 
   0x1A, 0x52, 0xD1, 0x97, 0x61, 0x79, 0xB9, 0x09, 
   0x6C, 0xB8, 0x2D, 0x6A, 0x85, 0xBD, 0x11, 0xC4, 
   0x87, 0x2B, 0xEC, 0x29, 0x70, 0x82, 0x32, 0xA3, 
   0x45, 0xB8, 0xC8, 0x69, 0xC8, 0x21, 0xBF, 0x40, 
   0xF9, 0x5F, 0xC5, 0xB6, 0x94, 0x0D, 0x3C, 0xE9, 
   0x2C, 0x25, 0x87, 0x46, 0xA2, 0xCD, 0x75, 0x45, 
   0x3A, 0x65, 0xE0, 0x2D, 0x5F, 0x7D, 0x7D, 0xD7, 
   0x92, 0x5B, 0xF0, 0x67, 0x06, 0x92, 0x75, 0xA9, 
   0xC0, 0xB4, 0x89, 0xD1, 0xEF, 0xEB, 0x5A, 0x75, 
   0xE1, 0x95, 0x16, 0x74, 0x47, 0x87, 0xBC, 0xDC, 
   0x43, 0xAF, 0xDD, 0x13, 0x87, 0x87, 0x60, 0x20, 
   0x80
};

extern A_UINT32 _inet_addr(A_CHAR *str);

/************************************************************************/
#if 0
static A_UINT32
_inet_addr(A_CHAR *str)
{
    A_UINT32 ipaddr;
    A_UINT32 data[4];
    A_UINT32 ret;

    ret = A_SSCANF(str, "%3d.%3d.%3d.%3d", data, data + 1, data + 2, data + 3);
    if (ret < 0) {
        return 0;
    }
    else {
        ipaddr = data[0] << 24 | data[1] << 16 | data[2] << 8 | data[3];
    }
    return ipaddr;
}
#endif

void qca_ssl_client_task_test(unsigned long arg)
{
    int fd;
    int res;
    
    char* buf = (char *)mem_alloc(1024);
    
    PRT_T_SSL_CLIENT("-- ssl client task --\n");
    
    qca_ssl_client_start((A_UINT8 *)calist_cert1, sizeof(calist_cert1));

    while (1)
    {
        fd = qca_ssl_socket();

		res = qca_ssl_connect(&fd, _inet_addr(SERVER_IP), SERVER_PORT);


    PRT_T_SSL_CLIENT("res:%d, A_ERROR:%d, A_OK:%d\n", res, A_ERROR, A_OK);
        if (res != A_ERROR)
        {
          PRT_T_SSL_CLIENT("break:%d\n", res);
            break;
        }

        qca_ssl_close(&fd);

        qcom_thread_msleep(2000);
    }

    int i = 0;

    while (1)
    {
        memset(buf, 0, sizeof(buf));

        sprintf(buf, "ssl connection test, test time %d\n", i++);

        res = qca_ssl_write((A_INT8 *)buf, strlen(buf));

        if (res <= 0)
        {
            PRT_T_SSL_CLIENT("Write failed\n");
            break;
        }
        
        if(qca_ssl_select(&fd) != 0)
        {
            memset(buf, 0, sizeof(buf));

            res = qca_ssl_read((A_INT8 *)buf, 1024);

            if (res <= 0)
            {
                PRT_T_SSL_CLIENT("Read failed\n");
                break;
            }

            PRT_T_SSL_CLIENT("ssl recv:%s\n", buf);
        }

        qcom_thread_msleep(500);
    }

    PRT_T_SSL_CLIENT("-- ssl client task exit --\n");

    qca_ssl_close(&fd);

    qca_ssl_client_stop();

	//qcom_task_exit(); 
}


void test_ssl_client(void)
{
    //qcom_task_start(qca_ssl_client_task_test, 0, 2048, 10);
	PRT_T_SSL_CLIENT("==qca_ssl_test\n");

	tx_thread_create(&ssl_thread, "ssl thread", qca_ssl_client_task_test,
		0, ssl_thread_buf, SSL_STACK_SIZE, 16, 16, 4, TX_AUTO_START);
}
